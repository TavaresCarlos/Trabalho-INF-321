import { Address } from './address';
import { Animal } from './animal';
import { Commerce } from './commerce';
import { Company } from './company';
import { Database } from './database';
import { Datatype } from './datatype';
import { _Date } from './date';
import { Fake } from './fake';
import { Finance } from './finance';
import { Git } from './git';
import { Hacker } from './hacker';
import { Helpers } from './helpers';
import { Image } from './image';
import { Internet } from './internet';
import type { KnownLocale } from './locales';
import { Lorem } from './lorem';
import { Mersenne } from './mersenne';
import { Music } from './music';
import { Name } from './name';
import { Phone } from './phone_number';
import { Random } from './random';
import { System } from './system';
import { Time } from './time';
import { Unique } from './unique';
import { Vehicle } from './vehicle';
import { Word } from './word';
declare type LiteralUnion<T extends U, U = string> = T | (U & {
    zz_IGNORE_ME?: never;
});
export interface LocaleDefinition {
    title: string;
    separator?: string;
    address?: Partial<{
        building_number: any[];
        city_name: any[];
        city_prefix: any[];
        city_suffix: any[];
        city: any[];
        country_code_alpha_3: any[];
        country_code: any[];
        country: any[];
        county: any[];
        default_country: any[];
        direction_abbr: any[];
        direction: any[];
        postcode_by_state: any[];
        postcode: any[];
        secondary_address: any[];
        state_abbr: any[];
        state: any[];
        street_address: any[];
        street_name: any[];
        street_suffix: any[];
        time_zone: any[];
    }>;
    animal?: Partial<{
        bear: any[];
        bird: any[];
        cat: any[];
        cetacean: any[];
        cow: any[];
        crocodilia: any[];
        dog: any[];
        fish: any[];
        horse: any[];
        insect: any[];
        lion: any[];
        rabbit: any[];
        snake: any[];
        type: any[];
    }>;
    app?: Partial<{
        author: any[];
        name: any[];
        version: any[];
    }>;
    business?: Partial<{
        credit_card_expiry_dates: any[];
        credit_card_numbers: any[];
        credit_card_types: any[];
    }>;
    cell_phone?: Partial<{
        formats: any[];
    }>;
    commerce?: Partial<{
        color: any[];
        department: any[];
        product_description: any[];
        product_name: any[];
    }>;
    company?: Partial<{
        adjective: any[];
        bs_adjective: any[];
        bs_noun: any[];
        bs_verb: any[];
        descriptor: any[];
        name: any[];
        noun: any[];
        suffix: any[];
    }>;
    database?: Partial<{
        collation: any[];
        column: any[];
        engine: any[];
        type: any[];
    }>;
    date?: Partial<{
        month: any[];
        weekday: any[];
    }>;
    finance?: Partial<{
        account_type: any[];
        credit_card: any[];
        currency: any[];
        transaction_type: any[];
    }>;
    hacker?: Partial<{
        abbreviation: any[];
        adjective: any[];
        ingverb: any[];
        noun: any[];
        phrase: any[];
        verb: any[];
    }>;
    internet?: Partial<{
        avatar_uri: any[];
        domain_suffix: any[];
        example_email: any[];
        free_email: any[];
    }>;
    lorem?: Partial<{
        supplemental: any[];
        words: any[];
    }>;
    music?: Partial<{
        genre: any[];
    }>;
    name?: Partial<{
        binary_gender: string[];
        female_first_name: string[];
        female_last_name: string[];
        female_middle_name: string[];
        female_prefix: string[];
        first_name: string[];
        gender: string[];
        last_name: string[];
        male_first_name: string[];
        male_last_name: string[];
        male_middle_name: string[];
        male_prefix: string[];
        name: string[];
        prefix: string[];
        suffix: string[];
        title: {
            descriptor?: string[];
            job: string[];
            level?: string[];
        };
    }>;
    phone_number?: Partial<{
        formats: any[];
    }>;
    system?: Partial<{
        directoryPaths: any[];
        mimeTypes: any[];
    }>;
    team?: Partial<{
        creature: any[];
        name: any[];
    }>;
    vehicle?: Partial<{
        bicycle: any[];
        fuel: any[];
        manufacturer: any[];
        model: any[];
        type: any[];
    }>;
    word?: Partial<{
        adjective: any[];
        adverb: any[];
        conjunction: any[];
        interjection: any[];
        noun: any[];
        preposition: any[];
        verb: any[];
    }>;
    [group: string]: any;
}
export declare type UsableLocale = LiteralUnion<KnownLocale>;
export declare type UsedLocales = Partial<Record<UsableLocale, LocaleDefinition>>;
export interface FakerOptions {
    locales?: UsedLocales;
    locale?: UsableLocale;
    localeFallback?: UsableLocale;
}
export interface DefinitionTypes {
    readonly name: string[];
    readonly address: string[];
    readonly animal: string[];
    readonly company: string[];
    readonly lorem: string[];
    readonly hacker: string[];
    readonly phone_number: string[];
    readonly finance: string[];
    readonly internet: string[];
    readonly commerce: string[];
    readonly database: string[];
    readonly system: string[];
    readonly date: string[];
    readonly vehicle: string[];
    readonly music: string[];
    readonly word: string[];
    readonly title: string | string[];
    readonly separator: string | string[];
}
export declare class Faker {
    locales: UsedLocales;
    locale: UsableLocale;
    localeFallback: UsableLocale;
    readonly definitions: Record<keyof DefinitionTypes, any>;
    private readonly definitionTypes;
    seedValue?: any[] | any;
    readonly fake: Fake['fake'];
    readonly unique: Unique['unique'];
    readonly mersenne: Mersenne;
    random: Random;
    readonly helpers: Helpers;
    datatype: Datatype;
    readonly address: Address;
    readonly animal: Animal;
    readonly commerce: Commerce;
    readonly company: Company;
    readonly database: Database;
    readonly date: _Date;
    readonly finance: Finance;
    readonly git: Git;
    readonly hacker: Hacker;
    readonly image: Image;
    readonly internet: Internet;
    readonly lorem: Lorem;
    readonly music: Music;
    readonly name: Name;
    readonly phone: Phone;
    readonly system: System;
    readonly time: Time;
    readonly vehicle: Vehicle;
    readonly word: Word;
    constructor(opts?: FakerOptions);
    /**
     * Load the definitions contained in the locales file for the given types
     *
     * @param types
     */
    private loadDefinitions;
    seed(value?: any[] | any): void;
    /**
     * Set Faker's locale
     *
     * @param locale
     */
    setLocale(locale: UsableLocale): void;
}
export declare const faker: Faker;
export default faker;
